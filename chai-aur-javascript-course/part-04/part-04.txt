# console.table([accountEmail, accountPassword, accountCity]) :
    The console.table() method displays tabular data as a table.
    This function takes one mandatory argument data, which must be an array or an object, and one additional optional parameter columns.
    The first column in the table will be labeled (index). If data is an array, then its values will be the array indices. If data is an object, then its values will be the property names. Note that (in Firefox) console.table is limited to displaying 1000 rows (first row is the labeled index).

# SCOPE : 
    Scope determines the accessibility (visibility) of variables.

    JavaScript has 3 types of scope :
        Block scope
        Function scope
        Global scope
    
    * BLOCK SCOPE :
        Before ES6 (2015), JavaScript had only Global Scope and Function Scope. ES6 introduced two important new JavaScript keywords: let and const. These two keywords provide Block Scope in JavaScript. Variables declared inside a { } block cannot be accessed from outside the block :
            Example
            {
            let x = 2;
            }
            // x can NOT be used here

        Variables declared with the var keyword can NOT have block scope. Variables declared inside a { } block can be accessed from outside the block.
            Example
            {
            var x = 2;
            }
            // x CAN be used here

    * LOCAL SCOPE :
        Variables declared within a JavaScript function, become LOCAL to the function.
            Example
            // code here can NOT use carName

            function myFunction() {
            let carName = "Volvo";
            // code here CAN use carName
            }

            // code here can NOT use carName
        Local variables have Function Scope, They can only be accessed from within the function. Since local variables are only recognized inside their functions, variables with the same name can be used in different functions.
        Local variables are created when a function starts, and deleted when the function is completed.

    * FUNCTION SCOPE :
        JavaScript has function scope: Each function creates a new scope.
        Variables defined inside a function are not accessible (visible) from outside the function.
        Variables declared with var, let and const are quite similar when declared inside a function. They all have Function Scope:
            function myFunction() {
            var carName = "Volvo";   // Function Scope
            }
            function myFunction() {
            let carName = "Volvo";   // Function Scope
            }
            function myFunction() {
            const carName = "Volvo";   // Function Scope
            }

    * GLOBAL JAVASCRIPT VARIABLES :
        A variable declared outside a function, becomes GLOBAL.
            Example
            let carName = "Volvo";
            // code here can use carName

            function myFunction() {
            // code here can also use carName
            }
        A global variable has Global Scope: All scripts and functions on a web page can access it. 

    * GLOBAL SCOPE :
        Variables declared Globally (outside any function) have Global Scope.
        Global variables can be accessed from anywhere in a JavaScript program.
        Variables declared with var, let and const are quite similar when declared outside a block. They all have Global Scope:
            var x = 2;       // Global scope
            let x = 2;       // Global scope
            const x = 2;       // Global scope